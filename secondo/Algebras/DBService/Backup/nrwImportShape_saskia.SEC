# Importing NRW Data

close database

create database nrw

open database nrw

let Roads = dbimport2('/opt/psec/skurz/nrw/roads.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/roads.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume

let Waterways = dbimport2('/opt/psec/skurz/nrw/waterways.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/waterways.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume

let Railways = dbimport2('/opt/psec/skurz/nrw/railways.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/railways.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume

let Points = dbimport2('/opt/psec/skurz/nrw/points.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/points.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume

let Places = dbimport2('/opt/psec/skurz/nrw/places.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/places.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume

let Natural = dbimport2('/opt/psec/skurz/nrw/natural.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/natural.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume

let Buildings = dbimport2('/opt/psec/skurz/nrw/buildings.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/buildings.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume

let Landuse = dbimport2('/opt/psec/skurz/nrw/landuse.dbf') addcounter[No, 1] shpimport2('/opt/psec/skurz/nrw/landuse.shp') namedtransformstream[GeoData] addcounter[No2, 1] mergejoin[No, No2] remove[No, No2] filter[isdefined(bbox(.GeoData))] validateAttr consume




