Database: berlintest
Restore : NO

Operator : atlocation
Number   : 1
Signature: tin x real x real -> real
Example  : query [const tin value ( (800)  ( ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) )   ( ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)) ) )] atlocation[ 0.0 , 0.5 ]
Result   : 0.5

Operator : atlocation
Number   : 2
Signature: tinattribute x real x real -> real
Example  : query [const tinattribute value ( (800) ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)))] atlocation[ 0.0 , 0.5 ]
Result   : 0.5

Operator : tinmin
Number   : 1
Signature: tin -> real
Example  : query [const tin value ( (800)  ( ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) )   ( ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)) ) )] tinmin
Result   : -1.0

Operator : tinmin
Number   : 2
Signature: tinattribute -> real
Example  : query ( [const tinattribute value ( (800) ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0))((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)))] ) tinmin
Result   : -1.0

Operator : tinmax
Number   : 1
Signature: tin -> real
Example  : query  ( [const tin value ( (800)  ( ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) )   ( ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)) ) )] ) tinmax
Result   : 1.0

Operator : tinmax
Number   : 2
Signature: tinattribute -> real
Example  : query  ( [const tinattribute value ( (800)  ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)))] ) tinmax
Result   : 1.0

Operator : tin2tinattribute
Number   : 1
Signature: tin -> stream( tuple ( [TinPart: tinattribute]))
Example  : query ( [const tin value ( (800)  ( ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) )   ( ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)) ) )] ) tin2tinattribute consume
Result   : ( (rel (tuple ( (TinPart tinattribute)))) ( ( (800  (((-1.0 0.0 0.0) (0.0 1.0 1.0) (1.0 0.0 0.0)))))((800(((1.0 0.0 0.0) (0.0 -1.0 -1.0)(-1.0 0.0 0.0)))))))


Operator : tinattribute2tin
Number   : 1
Signature: stream(tuple((T:tinattribute))) -> tin
Example  :  query  [const rel(tuple([T:tinattribute])) value ( ((  (800)  ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)) )  )) ] feed tinattribute2tin
Result   : (tin( (800)  ( ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)) ) ))

Operator : tin2tuplestream
Number   : 1
Signature: tinattribute -> stream(tuple(V1:real,H1:real,V2:real,H2:real,V3:real,H3:real,Part:int))
Example  : query ( [const tin value ( (800)  ( ((-1.0 0.0 0.0)(0.0 1.0 1.0)(1.0 0.0 0.0)) )   ( ((1.0 0.0 0.0)(0.0 -1.0 -1.0)(-1.0 0.0 0.0)) ) )] ) tin2tuplestream count
Result   : 2

Operator : createTin
Number   : 1
Signature: stream(tuple(V:point,H:real)) x int -> tin
Example  : query [const rel(tuple([V:point,H:real])) value ( ( (0.0 1.0) 1.0 )  ((-1.0 0.0) 0.0) ((1.0 0.0) 0.0) ((0.0 -1.0) -1.0))] feed createTin[800]
Result   : (tin ( (800) (((0.0 -1.0 -1.0)(-1.0 0.0 0.0)(1.0 0.0 0.0))((1.0 0.0 0.0)(-1.0 0.0 0.0)(0.0 1.0 1.0)))))

Operator : raster2tin
Number   : 1
Signature: sint -> tin
Example  : query [const sint value ((0.0 0.0 1.0)(2 2)(0 0 (1 2 3 4)) )] raster2tin[800]
Result   : (tin ((800)(((0.5 0.5 1.0)(0.5 1.5 3.0)(1.5 0.5 2.0))((0.5 1.5 3.0)(1.5 1.5 4.0)(1.5 0.5 2.0)))))

Operator : raster2tin
Number   : 2
Signature: sreal -> tin
Example  : query [const sreal value ((0.0 0.0 1.0)(2 2)(0 0 (1 2 3 4)) )] raster2tin[800]
Result   : (tin((800)(((0.5 0.5 1.0)(0.5 1.5 3.0)(1.5 0.5 2.0))((0.5 1.5 3.0)(1.5 1.5 4.0)(1.5 0.5 2.0)))))

Operator : unaryOp
Number   : 1
Signature: tin x (real x real x real -> real) -> tin
Example  : query [const tin value ((800)(((0.5 0.5 0.0)(0.5 1.5 0.0)(1.5 0.5 0.0))((0.5 1.5 0.0)(1.5 1.5 0.0)(1.5 0.5 0.0))))] unaryOp [fun(z:real) z + 1.0 ]
Result   : (tin((800)(((0.5 0.5 1.0)(0.5 1.5 1.0)(1.5 0.5 1.0))((0.5 1.5 1.0)(1.5 1.5 1.0)(1.5 0.5 1.0)))))


Operator : tin2stlfile
Number   : 1
Signature: tin x string -> bool (x file in .stl format) 
Example  : query [const tin value ((800)(((0.5 0.5 0.0)(0.5 1.5 0.0)(1.5 0.5 0.0))((0.5 1.5 0.0)(1.5 1.5 0.0)(1.5 0.5 0.0))))] tin2stlfile["./test.stl"]
Result   : TRUE


